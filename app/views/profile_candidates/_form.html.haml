-content_for :head do
  %meta{name: "viewport", content: "initial-scale=1.0, user-scalable=no"}

  :javascript
    function initialize() {
      geocoder = new google.maps.Geocoder();
    }
    
    function loadScript() {
      var script = document.createElement("script");
      script.type = "text/javascript";
      script.src = "http://maps.googleapis.com/maps/api/js?key=AIzaSyCEY0Wtv2sMZZRW0Fb3hmutA-7ET0O-58o&sensor=true&callback=initialize";
      document.body.appendChild(script);
    }
    
    window.onload = loadScript;
    
    var isGeoCoded = false;
    
    function updateInspiringStoryWordCount() {
      var words = $('#profile_candidate_inspiring_story').val().match(/\S+/g);
      if (words != null) {
        $("#remaining_inspiring_story_words").text("Sisa kata: " + (500 - words.length));
      }
    }
        
    function updateMotivationWordCount() {
      var words = $('#profile_candidate_motivation').val().match(/\S+/g);
      if (words != null) {
        $("#remaining_motivation_words").text("Sisa kata: " + (200 - words.length));
      }
    }

    function updateCollaborationWordCount() {
      var words = $('#profile_candidate_collaboration').val().match(/\S+/g);
      if (words != null) {
        $("#remaining_collaboration_words").text("Sisa kata: " + (200 - words.length));
      }
    }

    $(document).ready(function () {

                //reset the dropdowns to the first entry, which is a blank
                //$('select.mutually_exclusive_select_lists').prop('selectedIndex', 0);
                //all initial entries of first dropdown; all entries are the same for all dropdownlists
                var $allEntries = $('select').first();
                //count the number of dropdownlist
                var $countSelects = $('select').length;
                //putting entries into array; hardcoded id (change later on)
                var $allEntries = $('#list').find('option');

                //monitor changes to the select list
                $('select.mutually_exclusive_select_lists').change(function () {
                    //the focused dropdown
                    var $focusedDropdown = $(this);
                    //the focused dropdown list id
                    var selectedListId = $(this).attr("id");
                    //the selected option of the focused dropdownlist
                    var $optionSelected = $.trim($('#' + selectedListId + ' option:selected').text());
                    //other options that were not selected for the focused dropdownlist
                    var $otherOptions = $('#' + selectedListId + ' option:selected').siblings('option');
                    //the focused list object converted into an array
                    var listItems = [];
                    $otherOptions.each(function () {
                        listItems.push($.trim($(this).text()));
                    });
                    var lengthListItems = listItems.length;
                    //siblings are the dropdownlist that are not in focus
                    //find all siblings that are dropdownlist
                    var $allsiblings = $(this).siblings('select');
                    //preserve the $allEntries variable by making a copy to $originalEntries
                    var $originalEntries = $allEntries;
                    //array for storing entries that are visible for other dropdownlists
                    var validListItems = [];
                    //empty array for storing entries that weren't selected in any of the dropdownlist
                    var newListItems = [];
                    //entries that should be taken out and should not appear on the other dropdownlists
                    var avoidListItems = [];
                    //array in array
                    var arrayInArray = [];
                    var indexArray = [];
                    //count the original number of dropdowns
                    var countAllDropdownEntries = -1;
                    var furtherIndexArray = [];
                    //the original list items in array form
                    $originalEntries.each(function () {
                        countAllDropdownEntries += 1;
                        oneOfThem = $.trim($(this).text().replace(/\s+/g, " "));
                        arrayInArray.push(oneOfThem);
                        arrayInArray.push(countAllDropdownEntries);
                        indexArray.push(arrayInArray);
                        validListItems.push(oneOfThem);
                        arrayInArray = [];
                    });
                    var lengthOriginalEntries = $originalEntries.length;

                    //all of the currently selected values of all the dropdownlists        
                    $('select.mutually_exclusive_select_lists').each(function () {
                        //all of the selected entries for the dropdownlists
                        var currentid = '#' + $(this).attr('id');
                        var entrySelected = $.trim($(currentid).find('option:selected').text());

                        //selected values in all of the list that are not blank
                        avoidListItems.push(entrySelected);
                        //search within the index array for the item that was pushed into the avoidListItems
                        for (var b = 0; b < indexArray.length; b++) {
                            if (indexArray[b][0] == entrySelected) {
                                furtherIndexArray.push(indexArray[b]);
                            }
                        }
                    });

                    //getting the selected entries off the dropdownlists
                    for (var i = 0; i < avoidListItems.length; i++) {
                        //validListitem is the original list
                        for (var j = 0; j < validListItems.length; j++) {
                            //match between avoidListItem and validListItems
                            if (avoidListItems[i] == validListItems[j]) {
                                //make a copy of validListItems
                                newListItems = validListItems;
                                //splice the newListItems for entries that should show
                                newListItems.splice(j, 1);
                                j = validListItems.length;
                            }
                        }
                    }

                    //getting the indexes for the validListItems from the origlist
                    //going through all of the dropdownlists
                    $('select.mutually_exclusive_select_lists').each(function () {
                        //variable to reference the entry
                        $listAdd = $(this);
                        //the id of the entry
                        var currentid = '#' + $(this).attr('id');
                        var $selectList = $(currentid + " option");
                        var $selectedFromList = $.trim($(currentid + " option:selected").text());
                        //siblings are the dropdownlist that are not in focus

                        //for dropdownlist that have nothing selected                        
                        if ($selectedFromList == "") {
                            $selectList.remove();
                            for (var m = 0; m < validListItems.length; m++) {
                                if (m == 0) {
                                    $listAdd.append('<option> </option>')
                                }
                                $listAdd.append('<option>' + validListItems[m] + '</option>');
                            }
                        } else {
                            var countInvalid = 0;
                            //case where muliple dropdownlist don't have a blank focused item
                            $selectList.each(function () {
                                //entries to replace the current dropdownlist entries
                                //removal process to rid of entries that are already selected in the dropdownlists
                                for (var q = 0; q < validListItems.length; q++) {
                                    var entryFromList = $(this);
                                    //entry that was not selected and that is not empty
                                    if ($.trim($(this).text()).length !== 0 && $.trim($(this).text()) !== $selectedFromList) {
                                        //entries that did not match up to the validListItems
                                        if (validListItems[q] !== $.trim($(this).text())) {
                                            countInvalid += 1;
                                            if (q == validListItems.length - 1) {
                                                //all comparison lead to invalid; remove 
                                                if (countInvalid == validListItems.length) {
                                                    $(this).remove();
                                                }
                                            }
                                        }
                                    }
                                }
                                //clear out the count
                                countInvalid = 0;
                            });
                        }
                    });
                    //index for the validListItems
                    var validListItemsIndex = [];

                    for (var a = 0; a < validListItems.length; a++) {
                        //the indexArray is the orig dropdownlist entries
                        for (var b = 0; b < indexArray.length; b++) {
                            if (validListItems[a] == indexArray[b][0]) {
                                validListItemsIndex.push(indexArray[b][1]);
                            }
                        }
                    }

                    var siblingEntries = [];
                    var validSiblingIndex = [];
                    var siblingEntriesTemp = [];

                    //for siblings with something selected to add in the missing valid entries                    
                    $allsiblings.each(function () {
                        $optionsSibling = $allsiblings.find('option:selected');
                        var currentIdSibling = '#' + $(this).attr('id');
                        var entrySelectedSibling = $.trim($(currentIdSibling).find('option:selected').text());
                        if (entrySelectedSibling.length !== 0) {
                            siblingEntriesTemp.push(currentIdSibling);
                            //add index and using temp array
                            for (var b = 0; b < indexArray.length; b++) {
                                if (entrySelectedSibling == indexArray[b][0]) {
                                    siblingEntriesTemp.push(indexArray[b][1]);
                                }
                            };
                            siblingEntries.push(siblingEntriesTemp);
                            siblingEntriesTemp = [];
                        }
                    })

                    //for storing the validlistItems and the selected entry index
                    var combinedIndex = [];

                    //adding onto the entries of siblings with selected entries
                    for (var z = 0; z < siblingEntries.length; z++) {
                        combinedIndex = [];
                        var siblingIDEntry = siblingEntries[z][0];
                        var optionsSibling = $(siblingIDEntry + "").find('option');
                        var optionsSiblingSelected = $(siblingIDEntry + "").find('option:selected');
                        var siblingIdEntryIndex = siblingEntries[z][1];

                        //entries of validList into the combined index
                        for (var a = 0; a < validListItemsIndex.length; a++) {
                            combinedIndex.push(validListItemsIndex[a]);
                        }
                        combinedIndex.push(siblingIdEntryIndex);
                        combinedIndex.sort();

                        var siblingRestore = [];

                        //adding the options back into the sibling
                        for (var c = 0; c < indexArray.length; c++) {
                            for (var d = 0; d < combinedIndex.length; d++) {
                                if (indexArray[c][1] == combinedIndex[d]) {
                                    siblingRestore.push(indexArray[c][0]);
                                }
                                if ((d == combinedIndex.length - 1)) {
                                    if (c == indexArray.length - 1) {
                                        optionsSibling.remove();
                                        for (var n = 0; n < combinedIndex.length; n++) {
                                            for (var m = 0; m < indexArray.length; m++) {
                                                if (n == 0 && m == 0) {
                                                    $(siblingIDEntry + "").append('<option></option>');
                                                }
                                                if (combinedIndex[n] == indexArray[m][1]) {
                                                    $(siblingIDEntry + "").append('<option>' + indexArray[m][0] + '</option>');
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        //for reselecting the original entry in the sibling dropdown
                        for (var m = 0; m < indexArray.length; m++) {
                            if (indexArray[m][1] == siblingIdEntryIndex) {
                                var stringToSelect = indexArray[m][0];
                                var index = $(siblingIDEntry + " option:contains(" + stringToSelect + ")").index();
                                $(siblingIDEntry + "").prop('selectedIndex', index);
                                var siblingsAllOptions = $(siblingIDEntry + " option");
                                if (siblingsAllOptions.eq(0).text() == siblingsAllOptions.eq(1).text()) {
                                    siblingsAllOptions.eq(0).remove();
                                }
                            }
                        }

                        //reset the index for the next sibling
                        siblingIdEntryIndex = [];
                    }
                });
            });

    $(document).ready(function() {
      updateMotivationWordCount();
      updateInspiringStoryWordCount();
      updateCollaborationWordCount();
      
      $("#profile_candidate_motivation").keyup(function() {
        updateMotivationWordCount();
      });
      $("#profile_candidate_inspiring_story").keyup(function() {
        updateInspiringStoryWordCount();
      });
      $("#profile_candidate_collaboration").keyup(function() {
        updateCollaborationWordCount();
      });
      
      var latitudes = ['', '4.69513', '-8.40952', '-6.40582', '-3.80065', '0.55251', '-6.21154', '-1.48518', '-7.09091', '-7.15097', 
        '-7.53606', '-0.27878', '-3.09264', '-1.68149', '1.64063', '0.56033', '-2.74105', '0.293347', '-4.55858', '-3.23846',
        '1.57100', '-8.65738', '-8.65293', '-4.35450', '-1.33612', '0.29335', '-2.84414', '-3.66880', '-1.43003', '-4.14491',
        '0.62469', '-0.73994', '-3.31944', '2.11535', '-7.79722']
      var longitudes = ['', '96.74940', '115.18892', '106.06402', '102.25620', '123.06550', '106.84517', '102.43806', '107.66889', '110.14026', 
        '112.23840', '111.47529', '115.28376', '113.38235', '116.41939', '123.05539', '106.44059', '101.706829', '105.40681', '130.14527',
        '127.80877', '121.07937', '117.36165', '139.36531', '133.17472', '101.70683', '119.23208', '119.97405', '121.44562', '122.17460',
        '123.97500', '100.80001', '103.91440', '99.54510', '110.36880']
      
      $("#profile_form").submit(function (event) {
        var latitude = $("#profile_candidate_latitude");
        var longitude = $("#profile_candidate_longitude");
        
        if (!isGeoCoded) {
          event.preventDefault();

          if (!(typeof geocoder === "undefined")) {
            var address = $("#profile_candidate_location").val();
            var province = $("#profile_candidate_province").val() + ", Indonesia";
            
            var selectedIndex = $("#profile_candidate_province").prop('selectedIndex')-1
            
            var provinceLatitude = "";
            var provinceLongitude = ""
            if (selectedIndex > 0) {
              provinceLatitude = latitudes[selectedIndex];
              provinceLongitude = longitudes[selectedIndex];
            }
                
            console.log("Looking for location by address...: ");
            console.log(address);
            
            geocoder.geocode({'address': address}, function(results, status) {
              if (status == google.maps.GeocoderStatus.OK) {
                if (provinceLatitude != "" && provinceLongitude != "") {
                  var deltaLatitude = Math.abs(results[0].geometry.location.lat() - provinceLatitude);
                  var deltaLongitude = Math.abs(results[0].geometry.location.lng() - provinceLongitude);
                  
                  console.log("Delta Latitude:");
                  console.log(deltaLatitude);
                  console.log("Delta Longitude:");
                  console.log(deltaLongitude);
                  
                  if (deltaLatitude > 10 || deltaLongitude > 10)
                  {
                    latitude.val(provinceLatitude);
                    longitude.val(provinceLongitude);
                    isGeoCoded = true;
                  }
                }
              
                if (!isGeoCoded) {
                  latitude.val(results[0].geometry.location.lat());
                  longitude.val(results[0].geometry.location.lng());
                }
                console.log("Found location: " + latitude.val() + ", " + longitude.val());
              } else {
                console.log("Looking for location by province...: ");
                console.log(province);
                
                latitude.val(provinceLatitude);
                longitude.val(provinceLongitude);

                console.log("Found location: " + latitude.val() + ", " + longitude.val());
              }
              isGeoCoded = true;
              
              $("#profile_form").submit();
            });
          } else {
            isGeoCoded = true;
            $("#profile_form").submit();
          }
        }
      });
    });


.span8
  .well
    = simple_form_for(@profile, :html => {:id => 'profile_form', :class => 'form-horizontal'}) do |f|
      = f.error_notification
      = display_base_errors @profile

      .form-inputs
        = f.input :fullname, :label => "Nama lengkap"
        = f.input :dob, :input_html => {:style => 'width:auto'}, :label => "Tanggal lahir", 
          start_year: Date.today.year - 30, end_year: Date.today.year - 12, order: [:day, :month, :year]
        = f.input :place_of_birth, :label => "Tempat lahir"
        = f.input :gender, :label => "Jenis kelamin", :as => :select, :collection => [["Laki-laki", 0], ["Perempuan", 1]]
        = f.input :religion, :label => "Agama", :collection => ["Islam", "Katolik", "Protestan", "Hindu", "Budha", "Konghuchu"]
        = f.input :location, :label => "Alamat lengkap (contoh: Jalan Kaliurang Km 10, Wonorejo, Ngaglik, Sleman, Yogyakarta, Indonesia)", :as => :text, :input_html => {:rows => 5, :class => "span4"}
        = f.input :province, :label => "Provinsi domisili saat ini", :collection => ["Luar negeri"] + ProfileCandidate.all_province
        = f.input :phone, :label => "Nomor telepon"
        = f.input :hobby, :label => "Hobi", :as => :string
        = f.input :blood_type, :label => "Golongan darah", :collection => ["A", "B", "AB", "O"]
        = f.input :school, :label => "Nama institusi pendidikan terakhir/yang sedang dijalani. Contoh: Universitas Indonesia", :input_html => {"data-provide" => "typeahead", "data-source" => all_school_json}
        = f.input :batch, :label => "Angkatan masuk pendidikan tertinggi", :collection => (2000..2013)
        //= f.input :non_formal_education, :label => "Pendidikan non-formal.<br/><b>Format</b>: <i>[tahun mulai]-[tahun selesai];[nama institusi];</i>", :input_html => {:rows => 8, :class => "span5"}
        //= f.input :organization, :label => "Pengalaman organisasi.<br/><b>Format</b>:<i>[tahun mulai]-[tahun selesai];[nama organisasi];[jabatan];[tingkat, misal:internasional, institusi, provinsi]</i>", :input_html => {:rows => 8, :class => "span5"}
        //= f.input :committee, :label => "Pengalaman kepanitiaan.<br/><b>Format</b>: <i>[tahun mulai]-[tahun selesai];[nama kepanitiaan];[jabatan];[tingkat, misal:internasional, institusi, provinsi]</i>", :input_html => {:rows => 8, :class => "span5"}
        //= f.input :workshop, :label => "Pelatihan / Seminar / Konferensi / Kompetisi yang pernah diikuti.<br/><b>Format</b>: <i>[tahun];[nama kegiatan];[deskripsi singkat];[tingkat, misal:internasional, institusi, provinsi]</i>", :input_html => {:rows => 8, :class => "span5"}
        %hr{:noshade => "", :size => "3"}/
        %h4 Peminatan Diskusi
        %blockquote
          %div
            Berikut ini adalah daftar topik FIM Club (kelompok diskusi FIM lintas generasi dengan platform Whatsapp). Mohon berikan peringkat 1 (paling berminat) – 10 (paling tidak berminat), pada topik-topik berikut : 
        
        = f.input :diskusi_ekonomipembangunan, :label => "Ekonomi Pembangunan", :collection => (1..10), :input_html => {:id => "list", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_kebijakanpublik, :label => "Kebijakan Publik", :collection => (1..10), :input_html => {:id => "list2", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_energidanlingkungan, :label => "Energi dan Lingkungan", :collection => (1..10), :input_html => {:id => "list3", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_pendidikandanparenting, :label => "Pendidikan dan Parenting", :collection => (1..10), :input_html => {:id => "list4", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_medialiterasi, :label => "Media Literasi", :collection => (1..10), :input_html => {:id => "list5", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_socialentre, :label => "Sosial Enterpreneurship", :collection => (1..10), :input_html => {:id => "list6", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_pangangizikesehatan, :label => "Pangan, Gizi, dan Kesehatan", :collection => (1..10), :input_html => {:id => "list7", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_travel, :label => "Travel", :collection => (1..10), :input_html => {:id => "list8", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_peopledev, :label => "People Development", :collection => (1..10), :input_html => {:id => "list9", :class => "mutually_exclusive_select_lists"}
        = f.input :diskusi_liberalarts, :label => "Liberal Arts", :collection => (1..10), :input_html => {:id => "list10", :class => "mutually_exclusive_select_lists"}
        %hr{:noshade => "", :size => "3"}/
        /= f.input :motivation, :label => 'Motivasi mengikuti FIM (maks 200 kata)', :input_html => {:rows => 8, :class => "span5"}
        .controls{:style => 'margin-top:-15px; margin-bottom:25px;'}
          %label#remaining_motivation_words
            //Sisa kata: 200  
        
        //= f.input :collaboration, :label => 'Apa kolaborasi yang Anda tawarkan untuk bisa dikerjakan bersama-sama rekan-rekan FIM jika terpilih ikut FIM (maks 200 kata)', :input_html => {:rows => 8, :class => "span5"}
        .controls{:style => 'margin-top:-15px; margin-bottom:25px;'}
          %label#remaining_collaboration_words
            //Sisa kata: 200
        
        //= f.input :inspiring_story, :label => "Uraikan pengalaman sukses dan gagal yang paling berkesan dalam hidupmu (maks 500 kata)", :input_html => {:rows => 8, :class => "span5"}
        .controls{:style => 'margin-top:-15px; margin-bottom:25px;'}
          %label#remaining_inspiring_story_words
            //Sisa kata: 500
        
        = f.input :information_from, :label => "Sumber informasi FIM", :collection => ["Poster/Selebaran", "Jejaring sosial (Facebook/Twitter)", "Alumni FIM", "Website", "Informasi mulut ke mulut", "Lainnya"]
        = f.input :application_count, :label => "Sudah berapa kali mendaftar FIM. <br/><b>Format</b>:<i>[FIM ke-][Tahun]</i>", :input_html => {:rows => 4, :class => "span5"}, :as => :text
        = f.input :food_except, :label => "Apakah anda mempunyai alergi terhadap makanan atau hal lain ? jika Iya, sebutkan", :input_html => {:rows => 4, :class => "span5"}, :as => :text
        = f.input :performance_type, :label => "Tuliskan jenis ekspresi seni, kedaerahan atau kontemporer, yang bisa kamu tampilkan saat FIM 16. Contoh: Tari Pendet, main biola, monolog, dll", :input_html => {:rows => 4, :class => "span5"}, :as => :text
        
        .controls
          %label
            %blockquote
              %p
                Salin dan Lengkapi Pernyataan Dibawah ini
              %small
                Saya, [NAMA LENGKAP] menyatakan bahwa keterangan di atas diisi dengan sebenar-benarnya dan saya bersedia mengikuti seluruh rangkaian kegiatan pelatihan FIM 16 pada tanggal 30 April - 4 Mei 2014
        = f.input :agreement,
          :label => false, :input_html => {:rows => 3, :class => "span5", :value => ((!@profile.agreement? || @profile.agreement.empty?) ? 'Saya, [NAMA LENGKAP] menyatakan bahwa keterangan di atas diisi dengan sebenar-benarnya dan saya bersedia mengikuti seluruh rangkaian kegiatan pelatihan FIM 16 pada tanggal 30 April - 4 Mei 2014' : @profile.agreement)}
        %br
        .controls
          %label
            %blockquote
              %p
                Salin Pernyataan Dibawah ini
              %small
                Dengan ini, saya bersedia untuk aktif selama minimal 1 tahun pada kegiatan pasca FIM, apabila saya diterima sebagai peserta FIM 16. Adapun pilihan kegiatan Pasca Training yang saya pilih adalah (Dapat memilih lebih dari 1)
        = f.input :commit_agreement,
          :label => false, :input_html => {:rows => 3, :class => "span5", :value => ((!@profile.commit_agreement? || @profile.commit_agreement.empty?) ? 'Dengan ini, saya bersedia untuk aktif selama minimal 1 tahun pada kegiatan pasca FIM, apabila saya diterima sebagai peserta FIM 16. Adapun pilihan kegiatan Pasca Training yang saya pilih adalah (Dapat memilih lebih dari 1)' : @profile.commit_agreement)}

        = f.input :is_committed_to_central_fim, :label => "Saya akan komitmen pada FIM Pusat"
        = f.input :is_committed_to_regional_fim, :label => "Saya akan komitmen pada FIM regional"
        = f.input :is_committed_to_own_organization, :label => "Saya akan kembali aktif ke dalam organisasi sendiri dan akan membuka jejaring dengan FIM dalam minimal 1 kegiatan bersama"
        %br
        %h2 Pilihan Jalur Peserta
        %h4 Strategic Leader
        %blockquote
          %div
            Pemimpin atau calon pemimpin organisasi kepemudaan ekstra kampus atau organisasi kepemimpinan strategis lainnya
        %h4 Local Leader
        %blockquote
          %div
            Aktivis di tiap provinsi yang telah menggerakkan komunitas  sehingga menciptakan perubahan lokal di daerahnya 
        %h4 Activist Based on Character
        %blockquote
          %div
            Aktivis pemuda dari berbagai bidang yang ingin berkarya dan berjejaring bersama-sama dengan FIM
        = f.input :choose_type, :label => "Pilihan Anda", :as => :radio_buttons, :collection => [["Strategic Leader", 0], ["Local Leader", 1], ["Activist Based on Character", 2]]
        //= f.input :referal, :label => "Jika ada, tuliskan nama alumni FIM yang merekomendasikan Anda untuk menjadi peserta FIM 15", :as => :string
        = f.hidden_field :latitude
        = f.hidden_field :longitude
  
      .form-actions
        = f.submit "Next >", :class => "btn btn-primary"
